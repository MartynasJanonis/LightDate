        -:    0:Source:/home/martynas/Documents/GitHub/LightDate/LightDate.hpp
        -:    0:Graph:../CMakeFiles/runTests.dir/tests.gcno
        -:    0:Data:../CMakeFiles/runTests.dir/tests.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#ifndef LIGHTDATE_HPP
        -:    2:#define LIGHTDATE_HPP
        -:    3:
        -:    4:#ifdef _MSC_VER
        -:    5:#pragma once
        -:    6:#endif
        -:    7:
        -:    8:#include <chrono>
        -:    9:#include <iomanip>
        -:   10:#include <stdexcept>
        -:   11:
        -:   12:// TODO: Reduce the amount of unnecessary memory allocations / deallocations
        -:   13:
        -:   14:enum Month { jan = 1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec };
        -:   15:enum Weekday { mon = 1, tue, wed, thu, fri, sat, sun };
        -:   16:
        -:   17:class Date {
        -:   18:  public:
       84:   19:    Date(int y, Month m, int d)
       84:   20:    {
       84:   21:        if (validDate(y, m, d)) {
       78:   22:            year = y;
       78:   23:            month = m;
       78:   24:            day = d;
       78:   25:            wkday = calculateWeekday(y, m, d);
        -:   26:        }
        -:   27:        else {
        -:   28:            throw std::runtime_error(
       12:   29:                "Invalid date constructed: " + std::to_string(y) + "-" +
       18:   30:                std::to_string(m) + "-" + std::to_string(d));
        -:   31:        }
       78:   32:    }
        -:   33:    explicit Date(std::chrono::time_point<std::chrono::system_clock> n)
        -:   34:    {
        -:   35:        auto now = std::chrono::system_clock::to_time_t(n);
        -:   36:        tm utc_tm = *localtime(&now);
        -:   37:        year = utc_tm.tm_year + 1900;
        -:   38:        month = static_cast<Month>(utc_tm.tm_mon + 1);
        -:   39:        day = utc_tm.tm_mday;
        -:   40:        if (utc_tm.tm_wday == 0) {
        -:   41:            wkday = Weekday::sun;
        -:   42:        }
        -:   43:        else {
        -:   44:            wkday = static_cast<Weekday>(utc_tm.tm_wday);
        -:   45:        }
        -:   46:    }
        -:   47:
       20:   48:    explicit Date(tm t)
       20:   49:    {
       20:   50:        if (validDate(t.tm_year + 1900, static_cast<Month>(t.tm_mon + 1),
        -:   51:                      t.tm_mday)) {
       18:   52:            year = t.tm_year + 1900;
       18:   53:            month = static_cast<Month>(t.tm_mon + 1);
       18:   54:            day = t.tm_mday;
       18:   55:            if (t.tm_wday >= 0 && t.tm_wday <= 6) {
       32:   56:                if (t.tm_wday == 0) {
        2:   57:                    wkday = Weekday::sun;
        -:   58:                }
        -:   59:                else {
       14:   60:                    wkday = static_cast<Weekday>(t.tm_wday);
        -:   61:                }
        -:   62:            }
        -:   63:            else {
        2:   64:                wkday = calculateWeekday(year, month, day);
        -:   65:            }
        -:   66:        }
        -:   67:        else {
        2:   68:            throw std::runtime_error("tm date invalid");
        -:   69:        }
       18:   70:    }
        -:   71:
        -:   72:    explicit Date(time_t t)
        -:   73:    {
        -:   74:        tm utc_tm = *localtime(&t);
        -:   75:        year = utc_tm.tm_year + 1900;
        -:   76:        month = static_cast<Month>(utc_tm.tm_mon + 1);
        -:   77:        day = utc_tm.tm_mday;
        -:   78:        if (utc_tm.tm_wday == 0) {
        -:   79:            wkday = Weekday::sun;
        -:   80:        }
        -:   81:        else {
        -:   82:            wkday = static_cast<Weekday>(utc_tm.tm_wday);
        -:   83:        }
        -:   84:    }
        -:   85:
        -:   86:    inline explicit operator tm() const;
        -:   87:
       42:   88:    constexpr inline int getYear() const noexcept { return year; }
       38:   89:    constexpr inline Month getMonth() const noexcept { return month; }
       38:   90:    constexpr inline int getDay() const noexcept { return day; }
       28:   91:    constexpr inline Weekday getWeekday() const noexcept { return wkday; }
        -:   92:
        -:   93:    inline void setYear(int y);
        -:   94:    inline void setMonth(Month m);
        -:   95:    inline void setDay(int d);
        -:   96:
        -:   97:    inline Date operator++(int);
        -:   98:    inline Date& operator++();
        -:   99:
        -:  100:    inline Date operator--(int);
        -:  101:    inline Date& operator--();
        -:  102:
        -:  103:    inline Date& operator-=(const int& rhs);
        -:  104:    inline Date& operator+=(const int& rhs);
        -:  105:
        -:  106:    static inline Date today() { return Date(time(0)); }
        -:  107:
        -:  108:  private:
        -:  109:    int year;
        -:  110:    Month month;
        -:  111:    int day;
        -:  112:    Weekday wkday;
        -:  113:
        -:  114:    inline bool validDate(int y, Month m, int d);
        -:  115:    inline bool leapYear(int y);
        -:  116:    inline Weekday calculateWeekday(int y, Month m, int d);
        -:  117:};
        -:  118:
       80:  119:Weekday Date::calculateWeekday(int y, Month m, int d)
        -:  120:{
        -:  121:    // calculate weekday using Michael Keith's and Tom Craver's expr
        -:  122:    // and make it so Monday = 1 ... Sunday = 7
       80:  123:    int wday = (d += m < 3 ? y-- : y - 2,
       80:  124:                23 * m / 9 + d + 4 + y / 4 - y / 100 + y / 400) %
       80:  125:               7;
       80:  126:    if (wday == 0) {
       22:  127:        return Weekday::sun;
        -:  128:    }
       58:  129:    return static_cast<Weekday>(wday);
        -:  130:}
        -:  131:
        6:  132:Date& Date::operator+=(const int& rhs)
        -:  133:{
        6:  134:    auto tm_date_lhs = tm(*this);
        6:  135:    auto date_lhs = mktime(&tm_date_lhs);
        6:  136:    date_lhs += rhs * 86400;
        6:  137:    tm_date_lhs = *localtime(&date_lhs);
        6:  138:    *this = Date(tm_date_lhs);
        6:  139:    return *this;
        -:  140:}
        -:  141:
        -:  142:inline Date operator+(Date lhs, const int& rhs)
        -:  143:{
        -:  144:    lhs += rhs;
        -:  145:    return lhs;
        -:  146:}
        -:  147:
        6:  148:Date& Date::operator-=(const int& rhs)
        -:  149:{
        6:  150:    auto tm_date_lhs = tm(*this);
        6:  151:    auto date_lhs = mktime(&tm_date_lhs);
        6:  152:    date_lhs -= rhs * 86400;
        6:  153:    tm_date_lhs = *localtime(&date_lhs);
        6:  154:    *this = Date(tm_date_lhs);
        6:  155:    return *this;
        -:  156:}
        -:  157:
        -:  158:inline Date operator-(Date lhs, const int& rhs)
        -:  159:{
        -:  160:    lhs -= rhs;
        -:  161:    return lhs;
        -:  162:}
        -:  163:// returns the days between two dates
       20:  164:inline int operator-(const Date& lhs, const Date& rhs)
        -:  165:{
       20:  166:    auto tm_date_lhs = tm(lhs);
       20:  167:    auto tm_date_rhs = tm(rhs);
       20:  168:    auto date_lhs = mktime(&tm_date_lhs);
       20:  169:    auto date_rhs = mktime(&tm_date_rhs);
       20:  170:    return (date_lhs - date_rhs) / 86400;
        -:  171:}
        -:  172:
       52:  173:Date::operator tm() const
        -:  174:{
       52:  175:    tm conv{};
       52:  176:    conv.tm_year = year - 1900;
       52:  177:    conv.tm_mon = month - 1;
       52:  178:    conv.tm_mday = day;
       52:  179:    conv.tm_wday = wkday % 7;
        -:  180:
       52:  181:    conv.tm_sec = 0;
       52:  182:    conv.tm_min = 0;
       52:  183:    conv.tm_hour = 0;
       52:  184:    return conv;
        -:  185:}
        -:  186:
        4:  187:inline bool operator==(const Date& lhs, const Date& rhs)
        -:  188:{
        4:  189:    return (lhs.getYear() == rhs.getYear() &&
        4:  190:            lhs.getMonth() == rhs.getMonth() && lhs.getDay() == rhs.getDay());
        -:  191:}
        2:  192:inline bool operator!=(const Date& lhs, const Date& rhs)
        -:  193:{
        2:  194:    return !operator==(lhs, rhs);
        -:  195:}
       16:  196:inline bool operator<(const Date& lhs, const Date& rhs)
        -:  197:{
       16:  198:    return ((lhs - rhs) < 0);
        -:  199:}
        8:  200:inline bool operator>(const Date& lhs, const Date& rhs)
        -:  201:{
        8:  202:    return operator<(rhs, lhs);
        -:  203:}
        6:  204:inline bool operator<=(const Date& lhs, const Date& rhs)
        -:  205:{
        6:  206:    return !operator>(lhs, rhs);
        -:  207:}
        6:  208:inline bool operator>=(const Date& lhs, const Date& rhs)
        -:  209:{
        6:  210:    return !operator<(lhs, rhs);
        -:  211:}
        -:  212:
        -:  213:Date Date::operator--(int)
        -:  214:{
        -:  215:    Date orig(*this);
        -:  216:    operator--();
        -:  217:    return orig;
        -:  218:}
        -:  219:
        -:  220:Date& Date::operator--()
        -:  221:{
        -:  222:    *this -= 1;
        -:  223:    return *this;
        -:  224:}
        -:  225:
        4:  226:Date Date::operator++(int)
        -:  227:{
        4:  228:    Date orig(*this);
        4:  229:    operator++();
        4:  230:    return orig;
        -:  231:}
        -:  232:
       12:  233:Date& Date::operator++()
        -:  234:{
       12:  235:    if (validDate(year, month, day + 1)) {
        4:  236:        day++;
        -:  237:    }
        8:  238:    else if (validDate(year, static_cast<Month>(month + 1), 1)) {
        4:  239:        day = 1;
        4:  240:        month = static_cast<Month>(month + 1);
        -:  241:    }
        4:  242:    else if (validDate(year + 1, Month::jan, 1)) {
        4:  243:        day = 1;
        4:  244:        month = Month::jan;
        4:  245:        ++year;
        -:  246:    }
       12:  247:    wkday = static_cast<Weekday>(wkday % 7 + 1);
       12:  248:    return *this;
        -:  249:}
        -:  250:
        -:  251:inline std::ostream& operator<<(std::ostream& os, const Date& dd)
        -:  252:{
        -:  253:    return os << std::setw(4) << std::setfill('0') << dd.getYear() << "-"
        -:  254:              << std::setw(2) << dd.getMonth() << "-" << std::setw(2)
        -:  255:              << dd.getDay();
        -:  256:}
        -:  257:
       20:  258:bool Date::leapYear(int y)
        -:  259:{
       20:  260:    return (y % 4 == 0 && y % 100 != 0) || y % 400 == 0;
        -:  261:}
        -:  262:
      140:  263:bool Date::validDate(int y, Month m, int d)
        -:  264:{
      140:  265:    if (y < 0) {
        4:  266:        return false;
        -:  267:    }
      136:  268:    if (m >= Month::jan && m <= Month::dec) {
      132:  269:        if ((d >= 1 && d <= 31) &&
       58:  270:            (m == Month::jan || m == Month::mar || m == Month::may ||
       52:  271:             m == Month::jul || m == Month::aug || m == Month::oct ||
        -:  272:             m == Month::dec)) {
       84:  273:            return true;
        -:  274:        }
       48:  275:        if ((d >= 1 && d <= 30) && (m == Month::apr || m == Month::jun ||
       16:  276:                                    m == Month::sep || m == Month::nov)) {
       20:  277:            return true;
        -:  278:        }
       28:  279:        if (d >= 1 && d <= 28 && m == Month::feb) {
        8:  280:            return true;
        -:  281:        }
       20:  282:        if (leapYear(y) && m == Month::feb && d == 29) {
        2:  283:            return true;
        -:  284:        }
        -:  285:    }
       22:  286:    return false;
        -:  287:}
        -:  288:
        4:  289:void Date::setYear(int y)
        -:  290:{
        4:  291:    if (validDate(y, month, day)) {
        2:  292:        year = y;
        -:  293:    }
        -:  294:    else {
        2:  295:        throw std::runtime_error("Invalid year set");
        -:  296:    }
        2:  297:}
        -:  298:
        4:  299:void Date::setMonth(Month m)
        -:  300:{
        4:  301:    if (validDate(year, m, day)) {
        2:  302:        month = m;
        -:  303:    }
        -:  304:    else {
        2:  305:        throw std::runtime_error("Invalid month set");
        -:  306:    }
        2:  307:}
        -:  308:
        4:  309:void Date::setDay(int d)
        -:  310:{
        4:  311:    if (validDate(year, month, d)) {
        2:  312:        day = d;
        -:  313:    }
        -:  314:    else {
        2:  315:        throw std::runtime_error("Invalid day set");
        -:  316:    }
        2:  317:}
        -:  318:
        -:  319:#endif
